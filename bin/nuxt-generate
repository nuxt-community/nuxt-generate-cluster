#!/usr/bin/env node

// Show logs
process.env.DEBUG = process.env.DEBUG || 'nuxt:*'

const cluster = require('cluster')

if (cluster.isMaster) {
  const { defaults } = require('lodash')
  const fs = require('fs')
  const parseArgs = require('minimist')
  const resolve = require('path').resolve
  const store = require('data-store')('nuxt-generate-cluster')

  const argv = parseArgs(process.argv.slice(2), {
    alias: {
      b: 'build',
      h: 'help',
      c: 'config-file',
      p: 'params',
      w: 'workers',
      wc: 'worker-concurrency',
      s: 'spa',
      u: 'universal'
    },
    boolean: ['b', 'h', 's', 'u'],
    string: ['c', 'p'],
    number: ['w', 'wc'],
    default: {
      c: 'nuxt.config.js'
    }
  })

  if (argv.help) {
    console.log(`
      Description
        Generate a static web application (server-rendered)
      Usage
        $ nuxt-generate <dir>
      Options
        -b, --build           Whether to (re-)build the nuxt project
        -c, --config-file     Path to Nuxt.js config file (default: nuxt.config.js)
        -h, --help            Displays this message
        -p, --params          Extra parameters which should be passed to routes method
                                (should be a JSON string or queryString)
        -w, --workers [NUM]   How many workers should be started
                                (default: # cpus)
        -wc [NUM],            How many routes should be sent to 
        --worker-concurrency [NUM]    a worker per iteration

        --spa               Launch in SPA mode
        --universal         Launch in Universal mode (default)
    `)
    process.exit(0)
  }

  const rootDir = resolve(argv._[0] || '.')
  const nuxtConfigFile = resolve(rootDir, argv['config-file'])
  var options = {}
  if (fs.existsSync(nuxtConfigFile)) {
    options = require(nuxtConfigFile)
  } else if (argv['config-file'] !== 'nuxt.config.js') {
    console.error(`> Could not load config file ${argv['config-file']}`)
    process.exit(1)
  }
  if (typeof options.rootDir !== 'string') {
    options.rootDir = rootDir
  }
  options.dev = false // Force production mode (no webpack middleware called)

  // Nuxt Mode
  options.mode = (argv['spa'] && 'spa') || (argv['universal'] && 'universal') || options.mode

  const build = argv['build']

  let params
  if (argv['params']) {
    try {
      params = JSON.parse(argv['params'])
    } catch(e) {}

    if (!params) {
      params = require('querystring').parse(argv['params'])
    }

    if (!params) {
      console.error('Could not parse params as JSON or queryString')
    }
  }

  const storeTime = (key, time) => {
    timers[key] = time || Math.round(new Date().getTime()/1000)
    store.set(timers)
    store.save()
  }

  const timers = defaults({}, store.data || {}, {
    lastStarted: 0,
    lastBuilt: 0,
    lastFinished: 0
  })

  const { Master } = require('../')
  const { join } = require('path')
  
  storeTime('lastStarted')
  const master = new Master(options, {
    workerCount: argv['workers'],
    workerConcurrency: argv['worker-concurrency']
  })

  master.hook('built', (params) => {
    storeTime('lastBuilt')
    params = Object.assign(params, store.data || {})
  })

  master.hook('finished', () => {
    storeTime('lastFinished')
  })

  params = Object.assign({}, params || {}, store.data || {})
  master.run({ build, params })
} else {
  const { Worker } = require('../')

  const options = JSON.parse(process.env.options)

  const worker = new Worker(options)
  worker.run()
}
